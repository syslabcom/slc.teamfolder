# -*- coding: utf-8 -*-

from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
from Products.statusmessages.interfaces import IStatusMessage
from collections import defaultdict
from plone import api
from plone.app.workflow.browser.sharing import SharingView
from plone.memoize.instance import clearafter
from plone.memoize.instance import memoize
from slc.teamfolder.config import TEAMS
from zope.security import checkPermission

import transaction


class AssignTeam(SharingView):
    """Custom version of the SharingView which assigns users to folder
    specific groups instead of local_roles
    """

    template = ViewPageTemplateFile('templates/assign_team.pt')

    def __init__(self, context, request):
        super(AssignTeam, self).__init__(context, request)
        self.uuid = api.content.get_uuid(obj=context)

    @memoize
    def existing_role_settings(self):
        """Return a data structure which mimics the one returned by the
        SharingView method except that this one is generated by
        looking up the members of the folder specific groups (teams)
        rather than looking at the local or inherited roles.
        """
        member_roles = defaultdict(list)
        for team in TEAMS:
            team_id = self.uuid+"-"+team.lower()
            try:
                members = api.user.get_users(groupname=team_id)
            except api.exc.GroupNotFoundError:
                members = []
            for member in members:
                member_id = member.getId()
                member_roles[member_id].append(team)

        def roles_dict(roles_list):
            rdict = {}
            for team in TEAMS:
                rdict[team] = team in roles_list
            return rdict

        role_settings = []
        for member in member_roles.keys():
            if api.user.get(username=member):
                title = api.user.get(username=member).getProperty("fullname")
                membertype = 'user'
            else:
                title = api.group.get(groupname=member).getProperty("title")
                membertype = 'group'
            role_settings.append({
                'disabled': False,
                'id': member,
                'title': title,
                'type': membertype,
                'roles': roles_dict(member_roles[member]),
            })
        return role_settings

    @clearafter
    def update_role_settings(self, new_settings, reindex=False):
        """Customize to assign users to the relevant Teams rather than
        local_roles

        The return value determines whether reindexing is triggered or
        not. Only reindex when new groups are created.
        """
        changed = False

        # Clear the Teams, and create them if they don't already exist
        for team in TEAMS:
            team_id = self.uuid+"-"+team.lower()
            group = api.group.get(groupname=team_id)
            if not group:
                api.group.create(
                    groupname=team_id,
                    description=team+" Team for "+self.uuid,
                    roles=[team],
                )
                group = api.group.get(groupname=team_id)
                changed = True
            for user in api.user.get_users(group=group):
                api.group.remove_user(user=user, group=group)
            for new_user in new_settings:
                if team in new_user['roles']:
                    api.group.add_user(username=new_user['id'], group=group)
        transaction.commit()
        return changed

    @property
    def can_convert(self):
        """We know the folder hasn't been converted if corresponding folder
        groups don't exist. If this is the case, and the user has
        permission they can convert the Folder
        """
        has_group_folders = True
        for team in TEAMS:
            team_id = self.uuid+"-"+team.lower()
            if not api.group.get(team_id):
                has_group_folders = False
                break

        has_permission = checkPermission(
            'slc.teamfolder.convert', self.context)
        return not has_group_folders and has_permission
